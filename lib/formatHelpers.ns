/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */
export function formatRam(num) {
  return `${Math.round(num).toLocaleString()} GB`;
}

/** Return a datatime in ISO format */
export function formatDateTime(datetime) {
  return datetime.toISOString();
}

/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */
export function formatDuration(duration) {
  if (duration < 1000) return `${duration.toFixed(0)}ms`;
  const portions = [];
  const msInHour = 1000 * 60 * 60;
  const hours = Math.trunc(duration / msInHour);
  if (hours > 0) {
    portions.push(hours + "h");
    duration -= hours * msInHour;
  }
  const msInMinute = 1000 * 60;
  const minutes = Math.trunc(duration / msInMinute);
  if (minutes > 0) {
    portions.push(minutes + "m");
    duration -= minutes * msInMinute;
  }
  let seconds = duration / 1000.0;
  // Include millisecond precision if we're on the order of seconds
  seconds = hours == 0 && minutes == 0 ? seconds.toPrecision(3) : seconds.toFixed(0);
  if (seconds > 0) {
    portions.push(seconds + "s");
    duration -= minutes * 1000;
  }
  return portions.join(" ");
}

/**
 * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)
 * @param {number} num - The number to format
 * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)
 * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)
 **/
export function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {
  let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);
  return num >= 0 ? "$" + numberShort : numberShort.replace("-", "-$");
}
