import * as fauxFormulas from "/flurry/fauxFormulas.js";

/** @param {NS} ns **/
export async function main(ns) {
  var server = ns.args[0]; // Host to hack
  var host = ns.getHostname(); // Server to run scripts on

  ns.tail();

  var i = 0;
  var c = 0;
  let formulas;

  var player = ns.getPlayer();
  var fserver = ns.getServer(server);

  var contstantRam = ns.getScriptRam("/flurry/main.ns");
  var hackscriptRam = ns.getScriptRam("/flurry/payloads/hack.ns");
  var growscriptRam = ns.getScriptRam("/flurry/payloads/grow.ns");
  var weakenscriptRam = ns.getScriptRam("/flurry/payloads/weaken.ns");

  var maxRam = ns.getServerMaxRam(host) - contstantRam; // getting total RAM I can use that doesnt include the OP script
  var weakenThreads = (ns.getServerSecurityLevel(server) - ns.getServerMinSecurityLevel(server)) / 0.05;

  if (weakenThreads <= 0) {
    weakenThreads = 1;
  } // Set a minimum of 1 thread

  var maxGrowThreads = Math.floor(maxRam / growscriptRam - weakenscriptRam * weakenThreads);

  // Calculate target server values
  var cs = ns.getServerSecurityLevel(server);
  var ms = ns.getServerMinSecurityLevel(server);
  var mm = ns.getServerMaxMoney(server);
  var ma = ns.getServerMoneyAvailable(server);

  // Handle Formulas.exe
  if (ns.fileExists("Formulas.exe")) {
    formulas = ns.formulas.hacking;
  } else {
    formulas = fauxFormulas;
  }

  // Priming the server.  Max money and Min security must be acheived for this to work
  if (ma < mm == true) {
    ns.toast(`Priming ${fserver} from ${host}`);
    ns.exec("/flurry/payloads/weaken.ns", host, weakenThreads, server, 0);
    ns.exec("/flurry/payloads/grow.ns", host, maxGrowThreads, server, 0);

    var WeakenTime = formulas.weakenTime(fserver, player);
    await ns.sleep(WeakenTime + 1000);
    mm = ns.getServerMaxMoney(server);
    ma = ns.getServerMoneyAvailable(server);
    player = ns.getPlayer();
    fserver = ns.getServer(server);
    cs = ns.getServerSecurityLevel(server);
    ms = ns.getServerMinSecurityLevel(server);
  }

  // If Max Money is true, making sure security level is at its minimum
  if (cs > ms == true) {
    ns.toast(`Lowering Security on ${fserver} from ${host}`);
    ns.exec("/flurry/payloads/weaken.ns", host, weakenThreads, server, 0);

    WeakenTime = formulas.weakenTime(fserver, player);
    await ns.sleep(WeakenTime + 1000);
    cs = ns.getServerSecurityLevel(server);
    ms = ns.getServerMinSecurityLevel(server);
  }

  // Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while
  player = ns.getPlayer();
  fserver = ns.getServer(server);

  var HPercent = formulas.hackPercent(fserver, player) * 100;
  var GPercent = formulas.growPercent(fserver, 1, player, 2);
  WeakenTime = formulas.weakenTime(fserver, player);
  var GrowTime = formulas.growTime(fserver, player);
  var HackTime = formulas.hackTime(fserver, player);

  var growThreads = Math.round(2 / (GPercent - 1)); // Getting the amount of threads I need to grow 100%
  var hackThreads = Math.round(50 / HPercent); // Getting the amount of threads I need to hack 50% of the funds
  weakenThreads = Math.round(weakenThreads - growThreads * 0.004); // Getting required threads to fully weaken the server

  var totalRamForRun = hackscriptRam * hackThreads + growscriptRam * growThreads + weakenscriptRam * weakenThreads; // Calculating how much RAM is used for a single run
  var sleepTime = WeakenTime / (maxRam / totalRamForRun);
  // finding how many runs this server can handle and setting the time between run execution

  // if (sleepTime<500) // Testing forcing a min sleep time of 500 ms
  // {sleepTime = 500;
  // }

  var shiftCount = maxRam / totalRamForRun;
  var offset = sleepTime / 2;
  var gOffset = offset / 4;
  var hOffset = offset / 2;

  while (true) {
    var wsleep = 0; // At one point I made the weaken call sleep so I've kept it around
    var gsleep = WeakenTime - GrowTime - gOffset; // Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution
    var hsleep = WeakenTime - HackTime - hOffset; // Getting time for hack, shaving off more to make sure it beats both weaken and growth
    var UsedRam = ns.getServerUsedRam(host);

    if (totalRamForRun >= maxRam - UsedRam == false) {
      // making sure I have enough RAM to do a full run
      ns.exec("/flurry/payloads/weaken.ns", host, weakenThreads, server, wsleep, i);
      ns.exec("/flurry/payloads/grow.ns", host, growThreads, server, gsleep, i);
      ns.exec("/flurry/payloads/hack.ns", host, hackThreads, server, hsleep, i);

      if (c < shiftCount) {
        await ns.sleep(sleepTime);
        c++;
      } else {
        await ns.sleep(sleepTime + offset);
        c = 0;
      }
      i++;
    } else {
      ns.toast(`Not enough RAM. ${maxRam - UsedRam} available but ${totalRamForRun} needed`, "warning");
      ns.print(`Not enough RAM. ${maxRam - UsedRam} available but ${totalRamForRun} needed`);

      await ns.sleep(1000);
    }
  }
}

export function autocomplete(data, args) {
  return [...data.servers]; // This script autocompletes the list of servers.
}
